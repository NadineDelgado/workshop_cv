name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  testing-job:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Instalar Poetry
      run: pip install poetry
      
    - name: Configurar Poetry
      run: poetry config virtualenvs.create false
      
    - name: Instalar dependências
      run: poetry install --no-interaction --no-root
      
    - name: Executar testes
      run: poetry run pytest --cov=app --cov-report=xml --junitxml=test-results.xml

  linting-job:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Instalar Poetry
      run: pip install poetry
      
    - name: Configurar Poetry
      run: poetry config virtualenvs.create false
      
    - name: Instalar dependências
      run: poetry install --no-interaction --no-root
      
    - name: Validar estilo de código (Flake8)
      run: poetry run flake8 app/
      
    - name: Verificar formatação (Black)
      run: poetry run black --check app/
      
    - name: Verificar organização de imports (isort)
      run: poetry run isort --check-only app/

  build-job:
    runs-on: ubuntu-latest
    needs: [testing-job, linting-job]
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build da imagem Docker
      run: |
        docker build \
          --tag my-app:${{ github.sha }} \
          --tag my-app:latest \
          .
    
    - name: Salvar imagem Docker como artefato
      run: docker save my-app:latest -o app.tar
      
    - name: Upload do artefato da imagem
      uses: actions/upload-artifact@v3
      with:
        name: app-image
        path: app.tar

  run-image-job:
    runs-on: ubuntu-latest
    needs: build-job
    
    steps:
    - name: Download do artefato da imagem Docker
      uses: actions/download-artifact@v3
      with:
        name: app-image
        
    - name: Carregar imagem Docker
      run: docker load -i app.tar
      
    - name: Executar container Docker
      run: |
        docker run -d -p 8080:8000 --name my-running-app my-app:latest
        
    - name: Aguardar inicialização do container
      run: sleep 10
      
    - name: Verificar se o container está rodando
      run: docker ps
      
    - name: Verificar logs do container
      run: docker logs my-running-app
      
    - name: Parar e remover container
      run: |
        docker stop my-running-app
        docker rm my-running-app 
